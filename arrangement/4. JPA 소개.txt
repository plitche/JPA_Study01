	* JPA?
	
	- Java Persistence API
	- 자바 진영의 ORM 기술 표준
		Object-relational mapping(객체 관계 매핑)
		객체는 객체대로 설계
		관계형 데이터베이스는 관계형 데이터베이스대로 설계
		ORM 프레임워크가 중간에서 매핑
		대중적인 언어에는 대부분 ORM 기술이 존재
		
	JPA는 애플리케이션과 JDBC사이에서 동작
	
	- 발전 순서 : EJB- 엔티티 빈(자바 표준) -> 하이버네이트(오픈 소스) -> JPA(자바 표준)
	
	- JPA는 표준 명세
		JPA는 인터페이스의 모음
		JPA 2.1 표준 명세를 구현한 3가지 구현체
		하이버네이트, EclipseLink, DataNucleus
		
	- JPA를 왜 사용해야 하는가?
		1. SQL 중심적인 개발에서 객체 중심으로 개발
		2. 생산성 : 저장/조회/수정/삭제 다 만들어져 있다. 불러서 쓰기만 하면 된다.
		3. 유지보수 : 기존은 필드 변경시 모든 SQL 수정 -> 이제 필드만 추가하면 됨. 
		4. 패러다임의 불일치 해결
			: JPA와 상속
			: JPA와 연관관계
			: JPA와 객체 그래프 탐색
			: JPA와 비교하기
		5. JPA의 성능 최적화 기능
			: 1차 캐시와 동일성(identity)보장
				- 같은 트랜잭션 안에서는 같은 엔티티를 반환 
				- DB isolation Level이 Read COmmit이어도 애플리케이션에서 Repeatable Read 보장
			: 트랜잭션을 지원하는 쓰기 지연(transactional write-behinde)
				- 트랜잭션을 커밋할 때까지 INSERT SQL을 모음
				- JDBC BATCH SQL 기능을 사용해서 한번에 SQL 전송
			: 지연 로딩(Lazy Loading)
				- 지연 로딩(객체가 실제 사용될 때 로딩)
				- 즉시 로딩(JOIN SQL로 한번에 연관된 객체까지 미리 조회)
			
	!ORM은 객체와 RDB 두 기둥위에 있는 기술
	
	
			
	